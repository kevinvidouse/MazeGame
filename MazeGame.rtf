{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red204\green12\blue5;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c84706\c13725\c0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include"library.h"\
\
void read_maze(int & row_size,double & column_size, string arr[])\
\{ \
row_size=0;\
string line;\
ifstream fin("\cf3 \cb4 \strokec3 maze\cf2 \cb1 \strokec2 .txt.txt");\
while(true)\
\{\
fin >> line;\
if(fin.fail())\
\{break;\}\
arr[row_size] = line;\
row_size++;\
\}\
column_size = arr[0].length();\
\
\}\
\
\
void draw_maze()\
\{\
string arr[100];\
int row_size;\
double column_size;\
read_maze(row_size,column_size,arr);\
int column;\
int row;\
for(row=0;row<row_size;row++)\
\{\
for(column=0;column<column_size;column++)\
\{\
if(arr[row][column]=='#')\
\{\
fill_rectangle(column*(800.0/column_size),row*(600.0/row_size),800.0/column_size,600.0/row_size,color::grey);\
\}\
\
if(arr[row][column]=='A')\
\{\
fill_rectangle(column*(800.0/column_size),row*(600.0/row_size),800.0/column_size,600.0/row_size,color::green);\
\}\
if(arr[row][column]=='B')\
\{\
\
fill_rectangle(column*(800.0/column_size),row*(600.0/row_size),800.0/column_size,600.0/row_size,color::red);\
\}\
\
\}\
\
\}\
\}\
\
void starting_pos(int & startcolumn, int & startrow)\
\{\
string arr[100];\
int row_size;\
double column_size;\
read_maze(row_size,column_size,arr);\
int column;\
int row;\
for(row=0;row<row_size;row++)\
\{\
for(column=0;column<column_size;column++)\
\{\
if(arr[row][column]=='A')\
\{\
startcolumn=column;\
startrow=row;\
\
\}\
\}\
\}\
\
\
\}\
\
\
void right(int& column_pos,int & row_pos, string arr[])\
\{\
int row_size;\
double column_size;\
read_maze(row_size,column_size,arr);\
if(arr[column_pos+1][row_pos]=='.')\
\{\
fill_rectangle((column_pos+1)*(800.0/(column_size)),row_pos*(600.0/row_size),800.0/column_size,600.0/row_size,color::dark_green);\
column_pos = column_pos+1;\
\}\
\}\
\
\
void move_bot()\
\{\
string arr[100];\
int column_pos;\
int row_pos;\
int row_size;\
double column_size;\
read_maze(row_size,column_size,arr);\
int startcolumn;\
int startrow;\
\
while(true)\
\{\
starting_pos(column_pos,row_pos);\
double c = wait_for_key_typed();\
if( c==-90)\
\{\
\
starting_pos(startcolumn,startrow);\
fill_rectangle(startcolumn*(800.0/column_size),(startrow-1)*(600.0/(row_size)),800.0/column_size,600.0/row_size,color::dark_green);\
\
\}\
else if( c==-88 )\
\{\
starting_pos(startcolumn,startrow);\
fill_rectangle(startcolumn*(800.0/column_size),(startrow+1)*(600.0/(row_size)),800.0/column_size,600.0/row_size,color::dark_green);\
\
\}\
else if( c==-91 )\
\{\
starting_pos(startcolumn,startrow);\
fill_rectangle((startcolumn-1)*(800.0/(column_size)),startrow*(600.0/row_size),800.0/column_size,600.0/row_size,color::dark_green);\
\
\}\
else if( c==-89 )\
\{\
\
right(column_pos,row_pos,arr);\
\}\
\}\
\
\}\
\
void main()\
\{\
make_window(800,600);\
\'a0 \'a0draw_maze();\
move_bot();\
\}\
}